name: Chengla Baemin Headless

on:
  workflow_dispatch:  # 수동으로 실행하거나, 다른 이벤트로 바꿀 수 있음
  # push:
  #   branches: [ main ]

jobs:
  run-baemin-script:
    runs-on: ubuntu-latest  # GitHub 호스티드 runner (리눅스 기반)
    steps:
      # (1) 저장소 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) Python 세팅
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # (3) Chrome & 필요한 패키지 설치
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg unzip
          # 구글 크롬 리포 추가 & 설치
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          # 파이썬 패키지
          pip install --upgrade pip
          pip install -r requirements.txt

      # (4) 구글 시트 인증 JSON (base64) 디코딩 → /tmp/keyfile.json
      - name: Decode and Save Service Account JSON
        if: env.SERVICE_ACCOUNT_JSON_BASE64
        env:
          SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          echo "$SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > /tmp/keyfile.json

      # (5) 실제 배민 스크립트 실행
      - name: Run Chengla Baemin Script (Headless)
        env:
          CHENGLA_BAEMIN_ID: ${{ secrets.CHENGLA_BAEMIN_ID }}
          CHENGLA_BAEMIN_PW: ${{ secrets.CHENGLA_BAEMIN_PW }}
          GOOGLE_APPLICATION_CREDENTIALS: "/tmp/keyfile.json"
        run: |
          python chengla-baemin-auto.py

      # (6) 실패 시 디버그 아티팩트 업로드 (스크린샷, 로그 등)
      - name: Upload Debug Artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: debug-artifacts
          path: |
            *.png
            *.html
            script.log
